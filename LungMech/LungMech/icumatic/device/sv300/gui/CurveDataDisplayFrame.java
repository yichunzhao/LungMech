/*
 * CurveDataDisplayFrame.java
 *
 * Created on March 13, 2003, 3:31 PM
 */
package icumatic.device.sv300.gui;

import gov.noaa.pmel.sgt.SGLabel;
import gov.noaa.pmel.util.GeoDate;
import gov.noaa.pmel.sgt.dm.SGTLine;
import gov.noaa.pmel.sgt.dm.SGTData;
import gov.noaa.pmel.sgt.dm.SGTMetaData;
import gov.noaa.pmel.util.SoTRange;
import gov.noaa.pmel.util.IllegalTimeValue;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import DAConverter.*;
import servo300controller.*;
import icumatic.device.sv300.*;
import icumatic.toolkit.*;
import java.awt.*;
import java.io.*;
import javax.swing.*;
import java.util.*;
/**
 *
 * @author  yichun
 */
public class CurveDataDisplayFrame extends javax.swing.JFrame {
    
    /** Creates new form CurveDataDisplayFrame */
    public CurveDataDisplayFrame(Siemens300device siemens300Device, 
                                 Servo300Controller servo300Controller)
    {
        //classes associations
        this.siemens300device = siemens300Device;
        this.servo300Controller = servo300Controller;
        this.controlServo300 = controlServo300;
        
	sVInterface = siemens300device.getSVInterface();
	sVComm = sVInterface.getSVComm();
	dataModel = sVInterface.getDataModel();
	curveDataStorage = dataModel.getCurveDataStorage();
        //init all components on the GUI
        initComponents();
        fc = new JFileChooser(new File("C:\\LungMech\\data"));
        fc.addChoosableFileFilter(new SimpleFileFilter(
		new String[] {"txt"},"data files (*.txt)"));

        //fc.addChoosableFileType("Data Files (*.dat)","dat",new ImageIcon("..\\image/doc02.gif") );
                                        
        //simulated real-time data source
        /*
        airwayFlowData = new PseudoRealTimeData("airwayflow", "Airway Flow");
        inAirwayPressureData = new PseudoRealTimeData("inairwaypress", "Inspire Airway Pressure");
        exAirwayPressureData = new PseudoRealTimeData("exairwaypress", "Expire Airway Pressure") ;
        */    
       //real-time data source
        airwayFlowData = new RealTimeData("airwayflow", "Airway Flow",dataModel,new SoTRange.Double(-1800,1000,200));
        inAirwayPressureData = new RealTimeData("inairwaypress", "Inspire Airway Pressure",dataModel,new SoTRange.Double(0,50,5));
        exAirwayPressureData = new RealTimeData("exairwaypress", "Expire Airway Pressure",dataModel,new SoTRange.Double(0,50,5)) ;

        //realtime plotter 
        airwayFlowPlotter = new JRealTimePlotter("Airway Flow","ml/s",airwayFlowData);
        inAirwayPressurePlotter = new JRealTimePlotter("Inspire Airway Pressure", "mmH20",inAirwayPressureData);
        exAirwayPressurePlotter = new JRealTimePlotter("Exspire Airway Pressure", "mmH20",exAirwayPressureData);
        //stressIndexPlotter = new JRealTimePlotter("Expire Airway Pressure", "mmH20",exAirwayPressureData);
        //stressIndexPlotter = new JRealTimePlotter("Expire Airway Pressure", "mmH20",exAirwayPressureData);
        //measurementDisplay = new SV300MeasurementDisplay(this.dataModel);
        upperPressLimitSetting = new UpperPressLimitSetting(this.dataModel);
        
        //add plotters on the panel
        jPanel1.add(airwayFlowPlotter);
        jPanel1.add(inAirwayPressurePlotter);
        jPanel1.add(exAirwayPressurePlotter);
        //jPanel1.add(measurementDisplay);
        jPanel1.add(upperPressLimitSetting);
        //jPanel1.add(stressIndexPlotter);
        
        //start each plotter
        airwayFlowPlotter.init();
        airwayFlowPlotter.start();
        inAirwayPressurePlotter.init();
        inAirwayPressurePlotter.start();
        exAirwayPressurePlotter.init();
        exAirwayPressurePlotter.start();

        //stressIndexPlotter.init();
        //stressIndexPlotter.start();
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jToolBar1 = new javax.swing.JToolBar();
        startButton = new javax.swing.JButton();
        savebutton = new javax.swing.JButton();
        replayButton = new javax.swing.JButton();
        StopReplay = new javax.swing.JButton();
        controlButton = new javax.swing.JButton();
        jButtonMeasures = new javax.swing.JButton();
        jButtonExperiment = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setTitle("Determine Lung Mechanic");
        setBackground(new java.awt.Color(204, 204, 204));
        setName("LungMechanicsParametersGUI");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setMaximumSize(new java.awt.Dimension(602, 26));
        jToolBar1.setMinimumSize(new java.awt.Dimension(302, 26));
        jToolBar1.setPreferredSize(new java.awt.Dimension(452, 26));
        jToolBar1.setMargin(new java.awt.Insets(1, 1, 1, 1));
        startButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icumatic/device/sv300/gui/image/statdata_m.gif")));
        startButton.setText(" Start Data");
        startButton.setToolTipText("Start Data Source");
        startButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        startButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        startButton.setMaximumSize(new java.awt.Dimension(100, 26));
        startButton.setMinimumSize(new java.awt.Dimension(50, 26));
        startButton.setPreferredSize(new java.awt.Dimension(100, 26));
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(startButton);

        savebutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icumatic/device/sv300/gui/image/save_m.gif")));
        savebutton.setText("Save ");
        savebutton.setToolTipText("Save Sampling Data ");
        savebutton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        savebutton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        savebutton.setMaximumSize(new java.awt.Dimension(80, 26));
        savebutton.setMinimumSize(new java.awt.Dimension(50, 26));
        savebutton.setPreferredSize(new java.awt.Dimension(80, 26));
        savebutton.setEnabled(false);
        savebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebuttonActionPerformed(evt);
            }
        });

        jToolBar1.add(savebutton);

        replayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icumatic/device/sv300/gui/image/replay_m.gif")));
        replayButton.setText("Replay");
        replayButton.setToolTipText("Replay Data Plotting");
        replayButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        replayButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        replayButton.setMaximumSize(new java.awt.Dimension(80, 26));
        replayButton.setMinimumSize(new java.awt.Dimension(50, 26));
        replayButton.setPreferredSize(new java.awt.Dimension(80, 26));
        replayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replayButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(replayButton);

        StopReplay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icumatic/device/sv300/gui/image/noway_m.gif")));
        StopReplay.setText("Stop Play");
        StopReplay.setToolTipText("Stop Re-play");
        StopReplay.setActionCommand("StopReplay");
        StopReplay.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        StopReplay.setMargin(new java.awt.Insets(1, 1, 1, 1));
        StopReplay.setMaximumSize(new java.awt.Dimension(100, 26));
        StopReplay.setMinimumSize(new java.awt.Dimension(50, 26));
        StopReplay.setPreferredSize(new java.awt.Dimension(100, 26));
        StopReplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopReplayActionPerformed(evt);
            }
        });

        jToolBar1.add(StopReplay);

        controlButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icumatic/device/sv300/gui/image/control_m.gif")));
        controlButton.setText("Ext-Control");
        controlButton.setToolTipText("External control Servo300 ventilator controllable variables.");
        controlButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        controlButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        controlButton.setMaximumSize(new java.awt.Dimension(120, 26));
        controlButton.setMinimumSize(new java.awt.Dimension(45, 26));
        controlButton.setPreferredSize(new java.awt.Dimension(120, 26));
        controlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(controlButton);

        jButtonMeasures.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icumatic/device/sv300/gui/image/measurement.gif")));
        jButtonMeasures.setText("Measurements\n");
        jButtonMeasures.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        jButtonMeasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMeasuresActionPerformed(evt);
            }
        });

        jToolBar1.add(jButtonMeasures);

        jButtonExperiment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icumatic/device/sv300/gui/image/experiment.jpg")));
        jButtonExperiment.setText("Experiment ");
        jButtonExperiment.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(3, 3, 3, 3)));
        jButtonExperiment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExperimentActionPerformed(evt);
            }
        });

        jToolBar1.add(jButtonExperiment);

        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icumatic/device/sv300/gui/image/exit_m.gif")));
        exitButton.setText("Exit");
        exitButton.setToolTipText("Exit the Programe");
        exitButton.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        exitButton.setMargin(new java.awt.Insets(1, 1, 1, 1));
        exitButton.setMaximumSize(new java.awt.Dimension(80, 26));
        exitButton.setMinimumSize(new java.awt.Dimension(50, 26));
        exitButton.setPreferredSize(new java.awt.Dimension(80, 26));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(exitButton);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.SOUTH);

        jPanel1.setLayout(new java.awt.GridLayout(2, 2, 2, 2));

        jPanel1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.focus"));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1024, 768));
    }//GEN-END:initComponents

    private void jButtonExperimentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExperimentActionPerformed
        // TODO add your handling code here:
        //new ControlExsperimentDialog(this);
        //this.controlServo300.setInspOc(true);
        //new ControlServo300();
        new ControlServo300(servo300Controller,dataModel);
    }//GEN-LAST:event_jButtonExperimentActionPerformed

    private void jButtonMeasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMeasuresActionPerformed
        // TODO add your handling code here:
        new DisplaySV300Measurements(this, false, this.dataModel).show();
    }//GEN-LAST:event_jButtonMeasuresActionPerformed

    private void controlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlButtonActionPerformed
        // TODO add your handling code here:
        new Servo300ControlGUI(this,false,this.servo300Controller).show();
    }//GEN-LAST:event_controlButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // Add your handling code here:
        renameEntireDataFile();
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // Add your handling code here:
        if( test == true ){
            airwayFlowData.startData();
            inAirwayPressureData.startData();
            exAirwayPressureData.startData();
        }else{
            //start reading data from serial port
	    //sVComm.setReadStop(false);
		
            airwayFlowData.startData();
            inAirwayPressureData.startData();
            exAirwayPressureData.startData();
           };
    }//GEN-LAST:event_startButtonActionPerformed

    private void savebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebuttonActionPerformed
        // Add your handling code here:
        
        if( test == true ){
            airwayFlowData.stopData();
            inAirwayPressureData.stopData();
            exAirwayPressureData.stopData();
            }else{ 
		   //stop data to realtime plotters
                   airwayFlowData.stopData();
                   inAirwayPressureData.stopData();
                   exAirwayPressureData.stopData();
					
                 /**
                  *In the realtime sampling, if user stop the data stream
                  *then ask user if save the data.
                  **/
                   int option = JOptionPane.showConfirmDialog(
                                this,
                                "Do you want to save data for replay in the future?",
                                "Please Make a Choice",
                                JOptionPane.YES_NO_OPTION);
                   //if the user click the yes button
                   if(option == JOptionPane.YES_OPTION){
                       
                        //if user want to save data then close data storage file
                       
                       boolean a = this.curveDataStorage.close();
                       System.out.println("test curvedata close "+a);
                        
                        //close the reCruveData file
                        //(dataModel.reCurveDataStorage).close();
                        
                        //ask user to save the data
                        this.curveDataStorage.askSaveAsNew();
                                        
//                    fc.setDialogTitle("Save As");                    
//                    int returnVal = fc.showSaveDialog(this);
//                    if (returnVal == JFileChooser.APPROVE_OPTION) {
//                    //get the file user specified
//                    File file = fc.getSelectedFile();
//                    if(debug) System.out.println(file.toString());
//                    //save data storage file as a file specified by the user
//                    boolean tt = curveDataStorage.fileCopy(file);
//                    if(debug) System.out.println("rename file " + tt);
//                    curveDataStorage.resetStorageFile();
                            
                            //This is where a real application would save the file.
                            //log.append("Saving: " + file.getName() + "." + newline);
                   } else{ 
                            //if user changed the mind, the storage file still is updated to blank
                            curveDataStorage.resetStorageFile();
                            //log.append("Save command cancelled by user." + newline);
                     }
 
                   

                };
    }//GEN-LAST:event_savebuttonActionPerformed

    private void replayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replayButtonActionPerformed
        // Add your handling code here:
        fc.setDialogTitle("Please Select the Data File to Replay");
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //get the data file selected by the user
            File file = fc.getSelectedFile();
            try{
                replayControl = new ReplayController(file,dataModel);
		sVComm.setReadStop(true);
	        airwayFlowData.startData();
    	        inAirwayPressureData.startData();
        	exAirwayPressureData.startData();
                replayControl.startReplay();
            }catch(IOException e){         
            }
            
            //This is where a real application would open the file.
            //log.append("Opening: " + file.getName() + "." + newline);
            } else {
                //log.append("Open command cancelled by user." + newline);
            }

        
    }//GEN-LAST:event_replayButtonActionPerformed
	
    private void StopReplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopReplayActionPerformed
        // Add your handling code here:
		try
		{
			replayControl.stopReplay();
		}catch(IOException e)
		{
			
		}
        
		
        sVComm.setReadStop(false);
        airwayFlowData.stopData();
        inAirwayPressureData.stopData();
        exAirwayPressureData.stopData();
    }//GEN-LAST:event_StopReplayActionPerformed


    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        renameEntireDataFile();
        System.exit(0);
        
    }//GEN-LAST:event_exitForm
    
    /** as exit rename the entire data file*/
    private void renameEntireDataFile(){
        Date date = new Date();
        //Long time = new Long(date.getTime());
                
        Integer year = new Integer(date.getYear()+1900); //offset 1900
        Integer month = new Integer(date.getMonth()+1); // offset 1
        Integer day = new Integer(date.getDate());
        Integer hour = new Integer(date.getHours());
        Integer min = new Integer(date.getMinutes());
        Integer sec = new Integer(date.getSeconds());
        
        String time = "-"+year.toString()+"-"+month.toString()+"-"+day.toString()+"-"+hour.toString()
                        +"-"+min.toString()+"-"+sec.toString();
        System.out.println(time);
        File newFile = new File("C:\\LungMech\\data\\EntireData","pigstudy05"+time+".txt");
        this.curveDataStorage.fileCopy(newFile);
        
    }
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        
//        new CurveDataDisplayFrame(new Siemens300device("test serial port")).show();
//    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton StopReplay;
    private javax.swing.JButton controlButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton jButtonExperiment;
    private javax.swing.JButton jButtonMeasures;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton replayButton;
    private javax.swing.JButton savebutton;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
    
    //Variables declared by yichun
    private JRealTimePlotter airwayFlowPlotter;
    private JRealTimePlotter inAirwayPressurePlotter;
    private JRealTimePlotter exAirwayPressurePlotter;
    private JRealTimePlotter stressIndexPlotter;
    private SV300MeasurementDisplay  measurementDisplay; 
    private UpperPressLimitSetting upperPressLimitSetting; 
     //Realtime data Simulation 
    /*
    private PseudoRealTimeData airwayFlowData;
    private PseudoRealTimeData inAirwayPressureData;
    private PseudoRealTimeData exAirwayPressureData;
    */
    //realtime data source
    private RealTimeData airwayFlowData;
    private RealTimeData inAirwayPressureData;
    private RealTimeData exAirwayPressureData;
    
    //Class connections
    private Siemens300device siemens300device;
    private Servo300Controller servo300Controller;
    private ControlServo300 controlServo300;
    
    private SVInterface sVInterface;
    private SVComm sVComm;
    private DataModel dataModel;
    private DataStorage curveDataStorage;

    //declare a replay controller
    private ReplayController replayControl;	
    private JFileChooser fc; 
    
    //why set boolean test 
    final boolean test = false;
    final boolean debug = true;
}
