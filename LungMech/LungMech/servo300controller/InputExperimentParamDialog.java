/*
 * InputExperimentParamDialog.java
 * 
 * This class will pop up a GUI to guide user to setup experiment settings, including MV, num of insp. occlusions, 
 *number of exsp. occlusions, and first Exsp. time.  
 *
 * Created on 12. juli 2004, 09:20
 */

package servo300controller;

import java.awt.*;
import javax.swing.*;
import java.lang.*;
import icumatic.toolkit.*;

/**
 *
 * @author  yichun
 */
public class InputExperimentParamDialog extends javax.swing.JDialog {
    
    final boolean debug = true;
    
      
    /** Creates new form JFrame */
    public InputExperimentParamDialog() {
        initComponents();
    }
   
    public InputExperimentParamDialog(ControlServo300 controlServo300) {
        this.controlServo300 = controlServo300;
        initComponents();
    }
   

    public InputExperimentParamDialog(Servo300Controller servo300Controller) {
        initComponents();
    }
    
    public InputExperimentParamDialog(JFrame frame, boolean modal) {
        super(frame,modal);
        initComponents();
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel3 = new javax.swing.JPanel();
        jButtonStartExp = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSpinner4 = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSpinner5 = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        jButtonPredict = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldInspTidalVol = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldTotalInflationVol = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTextFieldTotalInflationTime = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldInspTimeLowFlow = new javax.swing.JTextField();
        jTextFieldInspTimeHighFlow = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldPauseTimeLowFlow = new javax.swing.JTextField();
        jTextFieldPauseTimeHighFlow = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldExpTimeLowFlow = new javax.swing.JTextField();
        jTextFieldExpTimeHighFlow = new javax.swing.JTextField();

        setTitle("Set Experiment Param.");
        setBackground(new java.awt.Color(204, 204, 204));
        setFont(new java.awt.Font("Arial", 0, 12));
        setName("ControlServo300");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(4, 8, 8, 8)));
        jPanel3.setMinimumSize(new java.awt.Dimension(71, 40));
        jPanel3.setPreferredSize(new java.awt.Dimension(61, 50));
        jButtonStartExp.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jButtonStartExp.setText("Set Param and Start Experiment");
        jButtonStartExp.setBorder(new javax.swing.border.EtchedBorder());
        jButtonStartExp.setMaximumSize(new java.awt.Dimension(67, 23));
        jButtonStartExp.setMinimumSize(new java.awt.Dimension(67, 23));
        jButtonStartExp.setPreferredSize(new java.awt.Dimension(61, 23));
        jButtonStartExp.setEnabled(false);
        jButtonStartExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartExpActionPerformed(evt);
            }
        });

        jPanel3.add(jButtonStartExp, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.X_AXIS));

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.X_AXIS));

        jPanel2.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(8, 8, 8, 8)));
        jPanel1.setLayout(new java.awt.GridLayout(5, 3, 0, 2));

        jPanel1.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Experiment Parameters"));
        jPanel1.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel1.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel1.setText(" Min. Vol.");
        jLabel1.setPreferredSize(new java.awt.Dimension(44, 26));
        jLabel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jLabel1ComponentHidden(evt);
            }
        });

        jPanel1.add(jLabel1);

        modelMV = new SpinnerNumberModel(5.5,1,10,0.1);
        jSpinner1.setModel(modelMV);
        jSpinner1.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel1.add(jSpinner1);

        jLabel2.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel2.setText("   l/min");
        jLabel2.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel1.add(jLabel2);

        jLabel3.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel3.setText(" Resp. Freq.");
        jLabel3.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel1.add(jLabel3);

        modelFreq = new SpinnerNumberModel(16,5,20,1);
        jSpinner2.setModel(modelFreq);
        jSpinner2.setPreferredSize(new java.awt.Dimension(44, 26));
        jSpinner2.setEnabled(false);
        jPanel1.add(jSpinner2);

        jLabel4.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel4.setText("   b/min");
        jLabel4.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel1.add(jLabel4);

        jLabel5.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel5.setText(" Inflating  ");
        jLabel5.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel1.add(jLabel5);

        modelNumberofBreath = new SpinnerNumberModel(4,2,10,1);
        jSpinner3.setModel(modelNumberofBreath);
        jSpinner3.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel1.add(jSpinner3);

        jLabel6.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel6.setText("   breath");
        jLabel6.setMaximumSize(new java.awt.Dimension(24, 16));
        jLabel6.setMinimumSize(new java.awt.Dimension(24, 16));
        jLabel6.setPreferredSize(new java.awt.Dimension(24, 26));
        jPanel1.add(jLabel6);

        jLabel7.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel7.setText(" Deflating  ");
        jLabel7.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel1.add(jLabel7);

        modelNumberofExspBreath = new SpinnerNumberModel(6,4,10,1);
        jSpinner4.setModel(modelNumberofExspBreath);
        jSpinner4.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel1.add(jSpinner4);

        jLabel8.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel8.setText("   breath");
        jLabel8.setMaximumSize(new java.awt.Dimension(24, 16));
        jLabel8.setMinimumSize(new java.awt.Dimension(24, 16));
        jLabel8.setPreferredSize(new java.awt.Dimension(24, 26));
        jPanel1.add(jLabel8);

        jLabel9.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel9.setText(" First Exsp.   ");
        jLabel9.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel1.add(jLabel9);

        modelFirstExspTime = new SpinnerNumberModel(0.5,0.0,1,0.1);
        jSpinner5.setModel(modelFirstExspTime);
        jSpinner5.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel1.add(jSpinner5);

        jLabel10.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel10.setText("   sec.");
        jLabel10.setMaximumSize(new java.awt.Dimension(24, 16));
        jLabel10.setMinimumSize(new java.awt.Dimension(24, 16));
        jLabel10.setPreferredSize(new java.awt.Dimension(24, 26));
        jPanel1.add(jLabel10);

        jPanel2.add(jPanel1);

        jButtonPredict.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jButtonPredict.setText("Predict");
        jButtonPredict.setToolTipText("Press predict button to see what may happen in the experiment.");
        jButtonPredict.setBorder(new javax.swing.border.EtchedBorder());
        jButtonPredict.setMaximumSize(new java.awt.Dimension(89, 89));
        jButtonPredict.setMinimumSize(new java.awt.Dimension(89, 89));
        jButtonPredict.setPreferredSize(new java.awt.Dimension(83, 83));
        jButtonPredict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPredictActionPerformed(evt);
            }
        });

        jPanel2.add(jButtonPredict);

        jPanel4.add(jPanel2);

        getContentPane().add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 8, 8, 8)));
        jPanel6.setLayout(new java.awt.BorderLayout(0, 4));

        jPanel6.setBorder(new javax.swing.border.TitledBorder("Experiemnt Prediction"));
        jPanel7.setLayout(new java.awt.GridLayout(3, 3, 0, 2));

        jPanel7.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(4, 4, 4, 4)), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED)));
        jLabel11.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12));
        jLabel11.setText(" Insp. Tidal Vol.");
        jPanel7.add(jLabel11);

        jTextFieldInspTidalVol.setEditable(false);
        jTextFieldInspTidalVol.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12));
        jTextFieldInspTidalVol.setText("0");
        jTextFieldInspTidalVol.setPreferredSize(new java.awt.Dimension(44, 26));
        jTextFieldInspTidalVol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldInspTidalVolActionPerformed(evt);
            }
        });

        jPanel7.add(jTextFieldInspTidalVol);

        jLabel12.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12));
        jLabel12.setText("  liter");
        jPanel7.add(jLabel12);

        jLabel13.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12));
        jLabel13.setText("Total Inflation Vol.");
        jPanel7.add(jLabel13);

        jTextFieldTotalInflationVol.setEditable(false);
        jTextFieldTotalInflationVol.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12));
        jTextFieldTotalInflationVol.setText("0");
        jTextFieldTotalInflationVol.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel7.add(jTextFieldTotalInflationVol);

        jLabel14.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12));
        jLabel14.setText("  liter");
        jPanel7.add(jLabel14);

        jLabel21.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12));
        jLabel21.setText("Total Inflation Time");
        jPanel7.add(jLabel21);

        jTextFieldTotalInflationTime.setEditable(false);
        jTextFieldTotalInflationTime.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12));
        jTextFieldTotalInflationTime.setText("0");
        jTextFieldTotalInflationTime.setPreferredSize(new java.awt.Dimension(44, 26));
        jPanel7.add(jTextFieldTotalInflationTime);

        jLabel22.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12));
        jLabel22.setText("  sec ");
        jPanel7.add(jLabel22);

        jPanel6.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel8.setLayout(new java.awt.GridLayout(4, 3));

        jPanel8.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(4, 4, 4, 4)), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED)));
        jLabel16.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jPanel8.add(jLabel16);

        jLabel15.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setText("Flow 0.2 l/s");
        jPanel8.add(jLabel15);

        jLabel20.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel20.setText("Flow 0.5 l/s");
        jPanel8.add(jLabel20);

        jLabel19.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel19.setText(" Insp. Time %");
        jPanel8.add(jLabel19);

        jTextFieldInspTimeLowFlow.setEditable(false);
        jTextFieldInspTimeLowFlow.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jTextFieldInspTimeLowFlow.setText("0");
        jTextFieldInspTimeLowFlow.setPreferredSize(new java.awt.Dimension(70, 26));
        jPanel8.add(jTextFieldInspTimeLowFlow);

        jTextFieldInspTimeHighFlow.setEditable(false);
        jTextFieldInspTimeHighFlow.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jTextFieldInspTimeHighFlow.setText("0");
        jTextFieldInspTimeHighFlow.setPreferredSize(new java.awt.Dimension(70, 26));
        jPanel8.add(jTextFieldInspTimeHighFlow);

        jLabel18.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel18.setText(" Pause Time %");
        jPanel8.add(jLabel18);

        jTextFieldPauseTimeLowFlow.setEditable(false);
        jTextFieldPauseTimeLowFlow.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jTextFieldPauseTimeLowFlow.setText("0");
        jTextFieldPauseTimeLowFlow.setPreferredSize(new java.awt.Dimension(70, 26));
        jPanel8.add(jTextFieldPauseTimeLowFlow);

        jTextFieldPauseTimeHighFlow.setEditable(false);
        jTextFieldPauseTimeHighFlow.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jTextFieldPauseTimeHighFlow.setText("0");
        jTextFieldPauseTimeHighFlow.setPreferredSize(new java.awt.Dimension(70, 26));
        jPanel8.add(jTextFieldPauseTimeHighFlow);

        jLabel17.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jLabel17.setText(" Exp. Time %");
        jPanel8.add(jLabel17);

        jTextFieldExpTimeLowFlow.setEditable(false);
        jTextFieldExpTimeLowFlow.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jTextFieldExpTimeLowFlow.setText("0");
        jTextFieldExpTimeLowFlow.setPreferredSize(new java.awt.Dimension(70, 26));
        jPanel8.add(jTextFieldExpTimeLowFlow);

        jTextFieldExpTimeHighFlow.setEditable(false);
        jTextFieldExpTimeHighFlow.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jTextFieldExpTimeHighFlow.setText("0");
        jTextFieldExpTimeHighFlow.setPreferredSize(new java.awt.Dimension(70, 26));
        jPanel8.add(jTextFieldExpTimeHighFlow);

        jPanel6.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-473)/2, (screenSize.height-540)/2, 473, 540);
    }//GEN-END:initComponents

    private void jTextFieldInspTidalVolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldInspTidalVolActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldInspTidalVolActionPerformed

    private void jButtonPredictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPredictActionPerformed
        // TODO add your handling code here:
        this.presetMV = modelMV.getNumber().doubleValue();
        System.out.println("set param MV = " + presetMV );
        
        this.presetFreq = modelFreq.getNumber().doubleValue();
        System.out.println("set param freq = " + presetFreq);
        
        this.presetNumberofInspBreath = this.modelNumberofBreath.getNumber().intValue();
        System.out.println("set param insp. num = " + presetNumberofInspBreath);
        
        this.presetNumberofExspBreath = this.modelNumberofExspBreath.getNumber().intValue();
        System.out.println("set param exp. num = " + this.presetNumberofExspBreath);
        
        this.presetFirstExspTime = this.modelFirstExspTime.getNumber().doubleValue();
        System.out.println("set first exp. time = " + this.presetFirstExspTime);

        predictExperiment();
        
        //this.jButtonStartExp.setEnabled(true);
    }//GEN-LAST:event_jButtonPredictActionPerformed
    /**
     * errorCheck will automatically check the errors caused by experiment parameter 
     * set by the user, and highlighten the impossible settings by red color. As setting
     * in possible range, it's highlightened by white.
     */
    private boolean errorCheckInspT(javax.swing.JTextField jTextField){
        //insp. time % limitations
        boolean error = false;
        
        if( Double.valueOf(jTextField.getText()).doubleValue() < 
            this.controlServo300.minInspTimePercentage ||  
                Double.valueOf(jTextField.getText()).doubleValue() > 
                    ( 100 - this.controlServo300.maxPauseTSetting-this.controlServo300.minExpTSetting )){
                        error = true;
                        jTextField.setBackground(Color.red); }
        else{
            //otherwise, keep bk color white
            jTextField.setBackground(Color.white);}
        
        return error;
    }
    
    /**
     * check error happened with Exp. Time % setting
     */
    private boolean errroCheckExpT(javax.swing.JTextField jTextField){
        //exp. time % limitations
        boolean error = false;
        
        if(Double.valueOf(jTextField.getText()).doubleValue() < 
            this.controlServo300.minExpTSetting ||
             Double.valueOf(jTextField.getText()).doubleValue() > 
                (100 - this.controlServo300.maxPauseTSetting - this.controlServo300.minInspTimePercentage )){
                    error = true;
                    jTextField.setBackground(Color.red);}
        else{
            //otherwise, keep bk color white
            jTextField.setBackground(Color.white);}
        
        return error;
    }
    
    /**
     * private method used by 
     */
    private void predictExperiment(){
        //calculate inflation tidal volume
        double Vt = this.controlServo300.calcInspVt(this.presetMV, this.presetFreq);
        this.jTextFieldInspTidalVol.setText(DecimalFormatDemo.customFormat("#.#",Vt));
        
        //calculate total inflation volume 
        double totalVinf = this.controlServo300.calcTotalInfVol( 
                                                     Vt, this.presetNumberofInspBreath );
        this.jTextFieldTotalInflationVol.setText( DecimalFormatDemo.customFormat("#.#",
                                                         totalVinf) );
        
        //calculate total inflation time
        double totalInfTime = this.controlServo300.calcBC(this.presetFreq)*this.presetNumberofInspBreath;
        this.jTextFieldTotalInflationTime.setText(DecimalFormatDemo.customFormat("#.#",
                                                            totalInfTime));
        
        //by default we set the pause Time % to be maximal, 30%. in order to obtain 1.1 sec pause time
        // at resp, freq = 16.
        this.jTextFieldPauseTimeLowFlow.setText(Double.toString(
                                                this.controlServo300.maxPauseTSetting));
        this.jTextFieldPauseTimeHighFlow.setText(Double.toString(
                                                this.controlServo300.maxPauseTSetting));
        
        //cal. insp Time percentage in the low flow rate
        double expectedInspTLowFlow = this.controlServo300.expectedInspT(
                                                this.controlServo300.minExpectedFlow, this.presetMV);
        this.jTextFieldInspTimeLowFlow.setText(DecimalFormatDemo.customFormat(
                                                "#.#",expectedInspTLowFlow));        
        
//        if(expectedInspTLowFlow != -1) { 
//            this.jTextFieldInspTimeLowFlow.setText(Double.toString(expectedInspTLowFlow));
//            
//        }else{
//            //suggest a new MV to reach the expected flow rate
//            double suggestedNewMVLowFlow = this.controlServo300.expectedMV(this.controlServo300.minExpectedFlow, 
//                                                                         this.controlServo300.minInspTimePercentage); 
            //prompt user a suggeted MV
            //-------------------------
//        } 

        //cal. insp Time percentage in the high flow rate
        double expectedInspTHighFlow = this.controlServo300.expectedInspT(
                            this.controlServo300.maxExpectedFlow, this.presetMV);
        this.jTextFieldInspTimeHighFlow.setText( DecimalFormatDemo.customFormat(
                                                    "#.#",expectedInspTHighFlow));        
//        if(expectedInspTHighFlow != -1) this.jTextFieldInspTimeHighFlow.setText(Double.toString(expectedInspTHighFlow));
//        else{
//            //suggest a new MV to reach the expected flow rate
//            double suggestedNewMVHighFlow = this.controlServo300.expectedMV(this.controlServo300.maxExpectedFlow, 
//                                                                         this.controlServo300.minInspTimePercentage); 
//            //prompt user a suggeted MV
//            //-------------------------
//        } 
        
        //cal. exp. time percentage and display them
        //cal. exp. time % as in low flow rate according to pause T% and insp T%
        double expectedExspTLowFlow = this.controlServo300.exspTPercentageGivenInspTandPauseT(
                                            Double.valueOf( this.jTextFieldInspTimeLowFlow.getText()).doubleValue() , 
                                                this.controlServo300.maxPauseTSetting) ;
        //set expected exp time % on screen
        this.jTextFieldExpTimeLowFlow.setText(DecimalFormatDemo.customFormat(
                                                "#.#",expectedExspTLowFlow));
        
        //cal. exp. time % as in high flow rate according to pause T% and insp T%
        double expectedExspTHighFlow = this.controlServo300.exspTPercentageGivenInspTandPauseT(
                                            Double.valueOf( this.jTextFieldInspTimeHighFlow.getText()).doubleValue() , 
                                                this.controlServo300.maxPauseTSetting) ;
        //set expected exp time % as high flow rate on screen
        this.jTextFieldExpTimeHighFlow.setText(DecimalFormatDemo.customFormat(
                                                "#.#",expectedExspTHighFlow));
        
        //check error
        boolean havingError = false;
        havingError |= errorCheckInspT(this.jTextFieldInspTimeLowFlow);
        havingError |= errorCheckInspT(this.jTextFieldInspTimeHighFlow);
        havingError |= errroCheckExpT(this.jTextFieldExpTimeLowFlow); 
        havingError |= errroCheckExpT(this.jTextFieldExpTimeHighFlow);
        
        //no error, then permit to start experiment
        if(!havingError){
            this.jButtonStartExp.setEnabled(true);
            //otherwise, experiment is prohibited.            
        }else{
            this.jButtonStartExp.setEnabled(false); }

    }
    private void jLabel1ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jLabel1ComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1ComponentHidden

    private void jButtonStartExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartExpActionPerformed
        //set experiment param to controlServo300 class's object
        this.controlServo300.setPresetFreq(this.presetFreq);
        this.controlServo300.setPresetMV(this.presetMV);
        this.controlServo300.setPresetNumofBreath(this.presetNumberofInspBreath); 
        this.controlServo300.setPresetNumofExsp(this.presetNumberofExspBreath);
        this.controlServo300.setPresetFirstExspTime(this.presetFirstExspTime);
        
        //set experiment start
        this.controlServo300.setInspOc(true);
        
        //exit dialog
        this.setVisible(false); 
        this.dispose();
    }//GEN-LAST:event_jButtonStartExpActionPerformed
    
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
      //  System.exit(0);
        this.setVisible(false); 
        this.dispose();
    }//GEN-LAST:event_exitForm
    /** get preset MV and Freq.*/
    public double getPresetMV(){ return this.presetMV;}
    public double getPresetFreq(){return this.presetFreq;}
    public int getNumberofBreath(){return this.presetNumberofInspBreath;}
    public int getNumberofExspBreath(){return this.presetNumberofExspBreath;}
    public double getFirstExspTime(){return this.presetFirstExspTime;}
    public boolean getStartInspOccEx(){return this.startInspOccEx;}
    public boolean getStartExspOccEx(){return this.startExspOccEx;}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPredict;
    private javax.swing.JButton jButtonStartExp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JTextField jTextFieldExpTimeHighFlow;
    private javax.swing.JTextField jTextFieldExpTimeLowFlow;
    private javax.swing.JTextField jTextFieldInspTidalVol;
    private javax.swing.JTextField jTextFieldInspTimeHighFlow;
    private javax.swing.JTextField jTextFieldInspTimeLowFlow;
    private javax.swing.JTextField jTextFieldPauseTimeHighFlow;
    private javax.swing.JTextField jTextFieldPauseTimeLowFlow;
    private javax.swing.JTextField jTextFieldTotalInflationTime;
    private javax.swing.JTextField jTextFieldTotalInflationVol;
    // End of variables declaration//GEN-END:variables
    
    //declare number model associated with Spinners
    private SpinnerNumberModel modelFreq;
    private SpinnerNumberModel modelInsp;
    private SpinnerNumberModel modelMV;
    private SpinnerNumberModel modelPause;
    private SpinnerNumberModel modelPeep;
    private SpinnerNumberModel modelNumberofBreath;
    private SpinnerNumberModel modelNumberofExspBreath;
    private SpinnerNumberModel modelFirstExspTime; 
    private double presetMV;
    private double presetFreq;
    private int presetNumberofInspBreath;
    private int presetNumberofExspBreath;
    private double presetFirstExspTime;
    private boolean startInspOccEx = false;
    private boolean startExspOccEx = false;
    private boolean inputFinish ;
    
    //class associations
    private ControlServo300 controlServo300;
}
